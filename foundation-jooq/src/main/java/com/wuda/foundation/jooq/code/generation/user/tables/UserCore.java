/*
 * This file is generated by jOOQ.
 */
package com.wuda.foundation.jooq.code.generation.user.tables;


import com.wuda.foundation.jooq.code.generation.user.FoundationUser;
import com.wuda.foundation.jooq.code.generation.user.Indexes;
import com.wuda.foundation.jooq.code.generation.user.Keys;
import com.wuda.foundation.jooq.code.generation.user.tables.records.UserCoreRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.ULong;


/**
 * 用户核心信息。用户有很多类型，比如一种分类方法是把用户分成个人用户和企业用户，而不同类型的用户需要的字段不一样，但是他们都是用户，即 is-a 
 * user。这个表属于所有用户的基本信息，其他不同类型的用户有自己专属的表，然后用用户ID关联回这个表。这样做还有一个好处，那就是其他表中的用户ID都统一关联回这个表，这样用户ID就不会有歧义了。
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserCore extends TableImpl<UserCoreRecord> {

    private static final long serialVersionUID = -651616776;

    /**
     * The reference instance of <code>foundation_user.user_core</code>
     */
    public static final UserCore USER_CORE = new UserCore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserCoreRecord> getRecordType() {
        return UserCoreRecord.class;
    }

    /**
     * The column <code>foundation_user.user_core.user_core_id</code>.
     */
    public final TableField<UserCoreRecord, ULong> USER_CORE_ID = createField(DSL.name("user_core_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>foundation_user.user_core.user_id</code>. user id
     */
    public final TableField<UserCoreRecord, ULong> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "user id");

    /**
     * The column <code>foundation_user.user_core.represent</code>. 比如User可以表示常规的用户，也可以用于表示账号
     */
    public final TableField<UserCoreRecord, UByte> REPRESENT = createField(DSL.name("represent"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "比如User可以表示常规的用户，也可以用于表示账号");

    /**
     * The column <code>foundation_user.user_core.type</code>. 用户类型
     */
    public final TableField<UserCoreRecord, UByte> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "用户类型");

    /**
     * The column <code>foundation_user.user_core.state</code>. 用户状态
     */
    public final TableField<UserCoreRecord, UByte> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "用户状态");

    /**
     * The column <code>foundation_user.user_core.can_sign_in</code>. 是否可以登录
     */
    public final TableField<UserCoreRecord, Boolean> CAN_SIGN_IN = createField(DSL.name("can_sign_in"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "是否可以登录");

    /**
     * The column <code>foundation_user.user_core.create_time</code>.
     */
    public final TableField<UserCoreRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_user.user_core.create_user_id</code>.
     */
    public final TableField<UserCoreRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_user.user_core.last_modify_time</code>.
     */
    public final TableField<UserCoreRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>foundation_user.user_core.last_modify_user_id</code>.
     */
    public final TableField<UserCoreRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>foundation_user.user_core.is_deleted</code>.
     */
    public final TableField<UserCoreRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>foundation_user.user_core</code> table reference
     */
    public UserCore() {
        this(DSL.name("user_core"), null);
    }

    /**
     * Create an aliased <code>foundation_user.user_core</code> table reference
     */
    public UserCore(String alias) {
        this(DSL.name(alias), USER_CORE);
    }

    /**
     * Create an aliased <code>foundation_user.user_core</code> table reference
     */
    public UserCore(Name alias) {
        this(alias, USER_CORE);
    }

    private UserCore(Name alias, Table<UserCoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserCore(Name alias, Table<UserCoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户核心信息。用户有很多类型，比如一种分类方法是把用户分成个人用户和企业用户，而不同类型的用户需要的字段不一样，但是他们都是用户，即 is-a user。这个表属于所有用户的基本信息，其他不同类型的用户有自己专属的表，然后用用户ID关联回这个表。这样做还有一个好处，那就是其他表中的用户ID都统一关联回这个表，这样用户ID就不会有歧义了。"), TableOptions.table());
    }

    public <O extends Record> UserCore(Table<O> child, ForeignKey<O, UserCoreRecord> key) {
        super(child, key, USER_CORE);
    }

    @Override
    public Schema getSchema() {
        return FoundationUser.FOUNDATION_USER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_CORE_IDX_USER_ID);
    }

    @Override
    public Identity<UserCoreRecord, ULong> getIdentity() {
        return Keys.IDENTITY_USER_CORE;
    }

    @Override
    public UniqueKey<UserCoreRecord> getPrimaryKey() {
        return Keys.KEY_USER_CORE_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserCoreRecord>> getKeys() {
        return Arrays.<UniqueKey<UserCoreRecord>>asList(Keys.KEY_USER_CORE_PRIMARY);
    }

    @Override
    public UserCore as(String alias) {
        return new UserCore(DSL.name(alias), this);
    }

    @Override
    public UserCore as(Name alias) {
        return new UserCore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserCore rename(String name) {
        return new UserCore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserCore rename(Name name) {
        return new UserCore(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, ULong, UByte, UByte, UByte, Boolean, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
